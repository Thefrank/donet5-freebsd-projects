name: CI Cross Build Runtime
#actions appears to pull docker images and sets them up before variables are declared need to use -v or -e from a variable? well, container: is not for you!
on:
  push:
    branches: runtime/5.x
    tags: '*'
  workflow_dispatch:
    inputs:
      targetBranch:
        description: Target Branch
        required: true
        default: runtime/5.x

jobs:
  build-runtime-and-tests:
    env:
      ROOTFS_ENV: ROOTFS_DIR=/crossrootfs/x64
      DOTNET_DOCKER_SERVER: mcr.microsoft.com/dotnet-buildtools/prereqs
      DOTNET_DOCKER_FALLBACK_TAG: ubuntu-18.04-cross-freebsd-12-20201218203401-f13d79e
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Correct Branch        
      run: echo "##[set-output name=branch;]${GITHUB_REF#refs/heads/${{ github.event.inputs.targetBranch }}}"
      id: extract_branch
    - name: Checkout 2
      uses: actions/checkout@v2
      with:
       fetch-depth: 1
       ref: ${{ steps.extract_branch.outputs.branch }}
       token: ${{ secrets.runtimecheckout }}
    - name: Get Latest Docker for FreeBSD
      run: |
          curl https://raw.githubusercontent.com/dotnet/versions/master/build-info/docker/image-info.dotnet-dotnet-buildtools-prereqs-docker-master.json -o /tmp/images.json
          LATEST_TAG=$(node -p "require('/tmp/images.json').repos[0].images.find(x => x.platforms[0].dockerfile.includes('freebsd')).platforms[0].simpleTags[0]" 2>/dev/null)
          echo "DOTNET_DOCKER_TAG=$DOTNET_DOCKER_SERVER:${LATEST_TAG:-DOTNET_DOCKER_FALLBACK_TAG}" >> $GITHUB_ENV
    - name: Build Runtime Linux->FreeBSD
      run: docker run -e $ROOTFS_ENV -v $(pwd):/runtime $DOTNET_DOCKER_TAG /runtime/build.sh -c Release -cross -os freebsd
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
       name: artifacts
       path: artifacts/packages/Release/Shipping/*
          
#WTB Official Github Action for uploading more than one file. PST.
    - name: Upload Release Assets
      run: |
          artifacts=
          for artifact in artifacts/packages/Release/Shipping/*.*; do
            artifacts="$artifacts -a $artifact"
          done
          hub release create $artifacts -m crossbuilt-${{ steps.extract_branch.outputs.branch }} ${{ steps.extract_branch.outputs.branch }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
